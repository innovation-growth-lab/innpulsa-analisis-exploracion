"""Streamlit entrypoint for ZASCA & RUES visualisation.

Run with:
    streamlit run app/app.py
"""

from __future__ import annotations

import streamlit as st
import pydeck as pdk
import pandas as pd

from constants import CITY_CONFIG, CLR_ZASCA_DARK, CLR_ZASCA_LIGHT, CLR_RUES, MAPBOX_API_KEY
from data_loader import load_data, _normalise_str
from plots import (
    build_density_plot,
    build_density_plot_zasca,
    format_ciiu,
)
from map_components import make_layer


@st.cache_data(show_spinner="Cargando datos...")
def get_data():
    """Get data from the data loader."""
    return load_data()


def main() -> None:
    """Main function to run the app."""
    st.set_page_config(page_title="Cohortes ZASCA y RUES", layout="wide")
    st.title("Cohortes ZASCA y RUES")

    (
        rues_filtered,
        top_3_ciiu_principal,
        zasca_coords,
        rues_coords,
    ) = get_data()

    maps_tab, strategies_tab = st.tabs(["Mapas", "Estrategias"])

    with maps_tab:
        city_tabs = st.tabs(list(CITY_CONFIG.keys()))

        for city, tab in zip(CITY_CONFIG.keys(), city_tabs):
            with tab:
                cfg = CITY_CONFIG[city]
                city_norm = _normalise_str(city)

                # Selector de actividad econ√≥mica
                ciiu_opts = top_3_ciiu_principal[
                    top_3_ciiu_principal["city"]
                    .apply(_normalise_str)
                    .str.contains(city_norm)
                ]["ciiu_principal"].tolist()
                ciiu_labels = [format_ciiu(c) for c in ciiu_opts]

                col_filter, col_toggle = st.columns([4, 1])
                with col_filter:
                    select_options = ["Todas", "Top 3"] + ciiu_labels
                    selected_label = st.selectbox(
                        "Actividad econ√≥mica (CIIU)",
                        select_options,
                        index=0,
                        key=f"ciiu_sel_{city}",
                    )

                with col_toggle:
                    show_rues = st.checkbox(
                        "Solo RUES",
                        value=True,
                        key=f"show_rues_{city}",
                    )

                # Determine filter codes
                if selected_label == "Todas":
                    codes_filter = None
                elif selected_label == "Top 3":
                    codes_filter = ciiu_opts
                else:
                    label_to_code = {format_ciiu(c): c for c in ciiu_opts}
                    codes_filter = [label_to_code[selected_label]]

                # Prepare data
                zasca_plot_df = zasca_coords.copy()
                rues_plot_df = rues_coords.copy()

                # Apply activity filter
                if codes_filter is not None:
                    zasca_plot_df = zasca_plot_df[
                        zasca_plot_df["ciiu_principal"].isin(codes_filter)
                    ]
                    rues_plot_df = rues_plot_df[
                        rues_plot_df["ciiu_principal"].isin(codes_filter)
                    ]

                # Colour column
                zasca_plot_df["colour"] = zasca_plot_df["in_rues"].map(
                    lambda m: CLR_ZASCA_DARK if m else CLR_ZASCA_LIGHT
                )

                # Layers
                layer_zasca = pdk.Layer(
                    "ScatterplotLayer",
                    data=zasca_plot_df,
                    get_position="[longitude, latitude]",
                    get_fill_color="colour",
                    get_radius=60,
                    pickable=True,
                )
                layer_rues = make_layer(rues_plot_df, CLR_RUES)

                layers = ([layer_rues] if show_rues else []) + [layer_zasca]

                deck = pdk.Deck(
                    map_style="mapbox://styles/mapbox/light-v10",
                    api_keys={"mapbox": MAPBOX_API_KEY},
                    initial_view_state=pdk.ViewState(
                        latitude=cfg["center"][0],
                        longitude=cfg["center"][1],
                        zoom=cfg["zoom"],
                        pitch=0,
                    ),
                    layers=layers,
                    tooltip={
                        "html": (
                            "<div style='font-family: Arial, sans-serif; font-size: 12px;'>"
                            "<b>ID:</b> {id}<br/>"
                            "<b>NIT:</b> {nit}<br/>"
                            "<b>CIIU:</b> {ciiu_principal}<br/>"
                            "<b>Direcci√≥n:</b> {gmaps_address}</div>"
                        ),
                        "style": {"backgroundColor": "#fefefe", "color": "#333333"},
                    },
                )

                col_map, col_side = st.columns([1, 1], gap="medium")

                with col_map:
                    st.subheader(city)
                    st.pydeck_chart(deck, use_container_width=True, height=800)

                with col_side:
                    st.subheader("Detalles")
                    st.caption(
                        "Unidades productivas en RUES (con presencia en ZASCA vs. sin ZASCA)"
                    )

                    city_df = rues_filtered[
                        rues_filtered["city"]
                        .apply(_normalise_str)
                        .str.contains(city_norm)
                    ]
                    if codes_filter is not None:
                        city_df = city_df[city_df["ciiu_principal"].isin(codes_filter)]

                    fig = build_density_plot(
                        city_df,
                        [
                            "empleados",
                            "activos_total",
                            "cantidad_mujeres_empleadas",
                            "ingresos_actividad_ordinaria",
                        ],
                    )
                    st.plotly_chart(
                        fig, use_container_width=True, key=f"plot_rues_{city}"
                    )

                    # ZASCA plot
                    st.caption(
                        "Unidades productivas en ZASCA (presencia en RUES vs. sin RUES)"
                    )

                    zasca_city_df = zasca_coords[
                        zasca_coords["city_zasca"]
                        .apply(_normalise_str)
                        .str.contains(city_norm)
                    ]
                    fig2 = build_density_plot_zasca(
                        zasca_city_df,
                        ["sales2022s", "emp_total"],
                    )
                    st.plotly_chart(
                        fig2, use_container_width=True, key=f"plot_zasca_{city}"
                    )

    with strategies_tab:
        with st.expander(
            "Posibilidad A: Variable instrumental (IV) con distancia al centro",
            expanded=False,
        ):
            col_img, col_content = st.columns([1, 4])
            with col_img:
                st.write("")  # Add some space above the image
                st.write("")  # Add some space above the image
                st.write("")  # Add some space above the image
                st.write("")  # Add some space above the image
                st.write("")  # Add some space above the image
                st.write("")  # Add some space above the image

                st.image("data/iv.png", use_container_width=True)
            with col_content:
                st.subheader("Descripci√≥n y l√≥gica")
                st.markdown(
                    """
                Se utiliza la **distancia** de la unidad productiva al centro ZASCA como una variable instrumental, siguiendo el enfoque de [McKenzie y Sakho (2010)](https://econpapers.repec.org/article/eeedeveco/v_3a91_3ay_3a2010_3ai_3a1_3ap_3a15-24.htm). La idea es que una mayor distancia aumenta los costos de acceso (tiempo, transporte) y, por tanto, reduce la probabilidad de que una empresa participe en el programa.
                """
                )

                st.info(
                    """
                **üìå Supuesto clave de exclusi√≥n (Cr√≠tico):** La ubicaci√≥n del centro **NO** debe estar correlacionada con el potencial econ√≥mico de la zona para el sector que apoya. Es decir, la distancia solo debe afectar los resultados de la empresa (ej. ingresos) **a trav√©s** de su efecto sobre la participaci√≥n en ZASCA, y no por otras v√≠as (ej. por estar en una zona con m√°s o menos dinamismo econ√≥mico).
                """
                )

                col1, col2 = st.columns([2, 2])
                with col1:
                    st.success("#### ‚úÖ Ventajas")
                    st.markdown(
                        """
                    - **Intuitivo:** La relaci√≥n entre distancia y costo de acceso es f√°cil de entender.
                    - **Efecto causal:** Si el supuesto se cumple, permite estimar el efecto causal del programa para el subgrupo de empresas cuya participaci√≥n es sensible a la distancia.
                    """
                    )
                with col2:
                    st.warning("#### ‚ö†Ô∏è Desaf√≠os y riesgos")
                    st.markdown(
                        """
                    - **Supuesto fuerte:** Es muy dif√≠cil de defender. La ubicaci√≥n de los centros puede ser estrat√©gica y no aleatoria.
                    - **Instrumento d√©bil:** Para ciertos sectores (ej. agroindustria, servicios digitales), la distancia f√≠sica puede ser un factor poco relevante.
                    - **Violaci√≥n de exclusi√≥n:** Si el centro ZASCA est√° co-localizado con otros servicios (C√°mara de Comercio, etc.), la distancia captura el acceso a todo ese ecosistema, no solo a ZASCA.
                    """
                    )

                st.subheader("Datos y variables clave")
                st.markdown(
                    """
                - **Fuentes:** RUES para muestra de control y resultados, datos del programa para localizaci√≥n de centros y participantes.
                - **Muestra:** Unidades productivas pre-seleccionadas y estratificadas (ej. por CIIU).
                - **Variables:** Localizaci√≥n (lat/lon), participaci√≥n en ZASCA, empleo (general y femenino), activos, ingresos.
                """
                )

        # --- Estrategia B.1: Difference-in-Differences (Entre Centros) ---
        with st.expander(
            "Posibilidad B.1: Difference-in-differences (Entre centros / Despliegue escalonado)"
        ):
            col_img, col_content = st.columns([1, 4])
            with col_img:
                st.write("")  # Add some space above the image
                st.write("")  # Add some space above the image

                st.image("data/did1.png", use_container_width=True)
            with col_content:
                st.subheader("Descripci√≥n y l√≥gica")
                st.markdown(
                    """
                Esta estrategia aprovecha que los centros ZASCA se abren en diferentes momentos y lugares. Compara el cambio en los resultados de las empresas en municipios que reciben un centro ("grupo de tratamiento") con el cambio en los resultados de empresas en municipios donde los centros se abrir√°n m√°s tarde ("grupo de control").
                """
                )

                st.info(
                    """
                **üìå Supuesto clave (Tendencias paralelas):** En ausencia del programa ZASCA, los resultados de las empresas en ambos grupos de municipios (tratamiento y control) habr√≠an seguido trayectorias o tendencias similares a lo largo del tiempo.
                """
                )

                col1, col2 = st.columns([2, 2])

                with col1:
                    st.success("#### ‚úÖ Ventajas")
                    st.markdown(
                        """
                    - **Robusto:** Considerada una de las estrategias cuasi-experimentales m√°s s√≥lidas.
                    - **Aprovecha el dise√±o:** Usa una caracter√≠stica real del despliegue del programa (el escalonamiento).
                    - **Controla no observables:** Mitiga el sesgo de autoselecci√≥n (ej. "willingness to attend") y controla por factores fijos no observables de las empresas o municipios.
                    """
                    )
                with col2:
                    st.warning("#### ‚ö†Ô∏è Desaf√≠os y riesgos")
                    st.markdown(
                        """
                    - **Modelaci√≥n compleja:** Los modelos de DiD escalonado (staggered) requieren consideraciones t√©cnicas cuidadosas.
                    - **Heterogeneidad:** Hay que controlar por diferencias regionales (ej. `city linear trends`) y por la variabilidad en la calidad del operador y los servicios entre los distintos centros.
                    - **Validar supuesto:** Se necesita data de varios periodos pre-tratamiento para verificar la plausibilidad de las tendencias paralelas.
                    """
                    )

                st.subheader("Datos y variables clave")
                st.markdown(
                    """
                - **Fuentes:** RUES (idealmente como panel de datos), calendario oficial de apertura de centros.
                - **Variables:** Datos de resultados (empleo, ventas) a nivel de empresa/municipio en varios puntos del tiempo. Caracter√≠sticas municipales para controles.
                """
                )

        # --- Estrategia B.2: Difference-in-Differences (Intra-Centro) ---
        with st.expander(
            "Posibilidad B.2: Difference-in-differences (Intra-centro / Cohortes)"
        ):
            col_img, col_content = st.columns([1, 4])
            with col_img:
                st.write("")  # Add some space above the image
                st.write("")  # Add some space above the image
                st.write("")  # Add some space above the image
                st.write("")  # Add some space above the image
                st.write("")  # Add some space above the image

                st.image("data/did2.png", use_container_width=True)
            with col_content:
                st.subheader("Descripci√≥n y l√≥gica")
                st.markdown(
                    """
                En lugar de comparar entre diferentes municipios, esta variante compara cohortes **dentro de un mismo centro**. Se comparan los resultados de las cohortes que entran antes ("early treated") con las que entran despu√©s ("later treated").
                """
                )

                st.info(
                    """
                **üìå Supuesto clave (Asignaci√≥n aleatoria a cohorte):** El momento en que una empresa decide entrar (en la primera o en la √∫ltima cohorte) **no** debe estar correlacionado con sus caracter√≠sticas no observadas que afectan sus resultados (ej. motivaci√≥n, urgencia, potencial de crecimiento).
                """
                )

                col1, col2 = st.columns([2, 2])
                with col1:
                    st.success("#### ‚úÖ Ventajas")
                    st.markdown(
                        """
                    - **Control perfecto:** Controla perfectamente por cualquier diferencia fija entre centros (calidad del operador, ubicaci√≥n, equipo disponible) al comparar empresas dentro del mismo entorno.
                    - **Conceptualmente simple:** La comparaci√≥n es muy directa si el supuesto se cumple.
                    """
                    )
                with col2:
                    st.warning("#### ‚ö†Ô∏è Desaf√≠os y riesgos")
                    st.markdown(
                        """
                    - **Modelaci√≥n compleja:** Los modelos de DiD escalonado (staggered) requieren consideraciones t√©cnicas cuidadosas.
                    - **Alto riesgo de sesgo:** Es muy probable que el supuesto no se cumpla. Las empresas m√°s motivadas, organizadas o con mayor urgencia podr√≠an inscribirse en las primeras cohortes, lo que contaminar√≠a la comparaci√≥n.
                    """
                    )

                st.subheader("Datos y variables clave")
                st.markdown(
                    """
                - **Fuentes:** RUES (panel de datos), listas de participantes de ZASCA con identificadores precisos de **cohorte** y **centro**.
                - **Variables:** Idem que en B.1, pero con la necesidad cr√≠tica de tener el dato de la cohorte de inicio de cada participante.
                """
                )

        st.divider()

        # --- Tabla Resumen Final ---
        st.header("Tabla resumen comparativa")
        st.markdown(
            "Una vista r√°pida de las tres opciones y sus caracter√≠sticas principales."
        )

        summary_data = {
            "Caracter√≠stica": [
                "Estrategia principal",
                "Grupo de control",
                "Supuesto m√°s cr√≠tico",
                "Mayor riesgo",
                "Recomendaci√≥n",
            ],
            "Opci√≥n A (IV con Distancia)": [
                "Variable instrumental",
                "Empresas similares que no participan (afectadas por la distancia)",
                "La ubicaci√≥n del centro es ex√≥gena al potencial econ√≥mico de la zona",
                "El supuesto de exclusi√≥n es muy poco cre√≠ble",
                "Baja viabilidad, alto riesgo de sesgo",
            ],
            "Opci√≥n B.1 (DiD Entre Centros)": [
                "Difference-in-differences (escalonado)",
                "Empresas en municipios donde el centro abre m√°s tarde",
                "Tendencias paralelas entre regiones tratamiento y control",
                "La heterogeneidad entre centros y regiones complica el modelo",
                "Alta viabilidad, es el est√°ndar de oro cuasi-experimental",
            ],
            "Opci√≥n B.2 (DiD Intra-Centro)": [
                "Difference-in-differences (por cohortes)",
                "Cohortes que inician el programa m√°s tarde en el mismo centro",
                "La entrada a una cohorte temprana vs. tard√≠a es aleatoria",
                "Sesgo de autoselecci√≥n (las empresas m√°s motivadas entran primero)",
                "Muy baja viabilidad, alto riesgo de sesgo por autoselecci√≥n",
            ],
        }

        summary_df = pd.DataFrame(summary_data)
        st.dataframe(summary_df, hide_index=True, use_container_width=True)

        st.header("Pasos Adicionales y Consideraciones T√©cnicas")
        st.markdown(
            "Para incrementar la robustez de la evaluaci√≥n, se deben considerar los siguientes an√°lisis avanzados:"
        )

        st.subheader("Validaci√≥n Emp√≠rica para la Estrategia IV (Opci√≥n A)")
        st.markdown(
            """
        Para fortalecer la credibilidad del instrumento de distancia, se deben realizar pruebas de falsificaci√≥n y robustez:
        - **Prueba de Placebo Temporal:** Verificar si la distancia a un centro ZASCA "futuro" (que a√∫n no ha sido anunciado ni construido) predice resultados de las empresas en el **pasado**. Un efecto significativo aqu√≠ invalidar√≠a el instrumento, ya que sugerir√≠a que la distancia est√° capturando caracter√≠sticas preexistentes de la zona y no el efecto del centro.
        - **An√°lisis de Attrition (desgaste de la muestra):** Analizar si la distancia al centro predice la probabilidad de que una empresa salga de la muestra de evaluaci√≥n (ej. cierre o imposibilidad de seguimiento). Si las empresas m√°s lejanas son m√°s propensas a desaparecer de los registros, esto podr√≠a introducir un sesgo de selecci√≥n en la muestra final.
        """
        )

        st.subheader("Refinamiento de la Estrategia DiD Escalonada (Opci√≥n B.1)")
        st.markdown(
            """
        Dado que los modelos tradicionales de DiD con efectos fijos bidireccionales (TWFE) pueden producir estimaciones sesgadas en dise√±os escalonados, es importante utilizar estimadores modernos y robustos.
        - **Implementaci√≥n de Estimadores Avanzados:** Se recomienda implementar m√©todos como el de **Callaway y Sant'Anna (2021)** o similares (Borusyak et al., 2022; Goodman-Bacon, 2021). Estos enfoques manejan correctamente la heterogeneidad de los efectos del tratamiento a lo largo del tiempo y entre grupos que son tratados en diferentes momentos, proporcionando estimaciones m√°s fiables y descompuestas del efecto promedio del tratamiento (ATT).
        """
        )


if __name__ == "__main__":
    main()
