"""Create diverging stacked bar chart for Sisbén groups analysis."""

import logging
from pathlib import Path

import altair as alt
import pandas as pd

from innpulsa.settings import DATA_DIR

logger = logging.getLogger("innpulsa.scripts.descriptive.plots.sisben_groups")


def plot_sisben_groups_diverging(df_plot: pd.DataFrame) -> alt.LayerChart:
    """Create a diverging stacked bar chart for Sisbén groups comparison.

    Args:
        df_plot: the dataframe generated by the 'proporciones_grupos_sisben' function.

    Returns:
        an altair chart object.

    """
    # prepare data for diverging bars
    df_plot = df_plot.copy()

    # create mapping for positioning
    group_mapping: dict[str, int] = {
        "A": -1,  # left of axis
        "B": -1,  # left of axis
        "C": -1,  # left of axis
        "D": 1,  # right of axis
        "Vulnerable": -1,  # left of axis
        "No vulnerable": 1,  # right of axis
    }

    # assign positioning and create plot values
    df_plot["position"] = df_plot["grupo"].map(group_mapping)  # type: ignore[reportArgumentType]
    df_plot["plot_value"] = df_plot["percentage"] * df_plot["position"]

    # create color categories for consistent coloring
    df_plot["color_category"] = df_plot["source"] + "_" + df_plot["grupo"]

    # define color scheme using 4 distinct colors: blue, orange, red, yellow
    # ZASCA: blue, orange, red, yellow
    # SISBÉN Nacional: blue, orange, red, yellow
    # Otros programas: orange (Vulnerable), yellow (No vulnerable)
    color_scale = alt.Scale(
        domain=[
            "ZASCA_A",
            "ZASCA_B",
            "ZASCA_C",
            "ZASCA_D",
            "SISBÉN Nacional_A",
            "SISBÉN Nacional_B",
            "SISBÉN Nacional_C",
            "SISBÉN Nacional_D",
            "Otros programas de apoyo_Vulnerable",
            "Otros programas de apoyo_No vulnerable",
        ],
        range=[
            "#7DACE8",  # ZASCA A: blue 60
            "#FF5836",  # ZASCA B: red
            "#FAB61B",  # ZASCA C: yellow
            "#00B2A2",  # ZASCA D: green
            "#7DACE8",  # SISBÉN Nacional A: blue 60
            "#FF5836",  # SISBÉN Nacional B: red
            "#FAB61B",  # SISBÉN Nacional C: yellow
            "#00B2A2",  # SISBÉN Nacional D: green
            "#FF8268",  # Otros programas Vulnerable: red 80
            "#00B2A2",  # Otros programas No vulnerable: yellow 80
        ],
    )

    # create base chart
    chart = (
        alt.Chart(df_plot)
        .mark_bar()
        .encode(
            y=alt.Y(
                "source:N",
                axis=alt.Axis(labels=False, title=None, grid=False),
                sort=["ZASCA", "SISBÉN Nacional", "Otros programas de apoyo"],
            ),
            x=alt.X(
                "plot_value:Q",
                axis=alt.Axis(labels=False, title=None, grid=False),
                scale=alt.Scale(domain=[-50, 50]),
            ),
            color=alt.Color("color_category:N", scale=color_scale, legend=None),
            order=alt.Order("grupo:N"),
            tooltip=[
                alt.Tooltip("source:N", title="Fuente"),
                alt.Tooltip("grupo:N", title="Grupo"),
                alt.Tooltip("percentage:Q", title="Porcentaje (%)", format=".1f"),
            ],
        )
        .properties(
            width=500,
            height=500,
        )
    )

    # add text labels for percentages - simple centering within each bar segment
    df_labels = df_plot.copy()

    # for each source, calculate text positions
    df_labels["text_x"] = 0.0
    for source in df_labels["source"].unique():
        source_mask = df_labels["source"] == source
        source_data = df_labels[source_mask].copy()

        # separate left and right side groups
        left_groups = source_data[source_data["position"] == -1].copy()
        right_groups = source_data[source_data["position"] == 1].copy()

        # position left side groups (A, B, C, Vulnerable)
        if not left_groups.empty:
            group_order = {"A": 1, "B": 2, "C": 3, "Vulnerable": 4}
            left_groups["group_order"] = left_groups["grupo"].map(group_order)  # type: ignore[reportArgumentType]
            left_groups = left_groups.sort_values("group_order")

            # calculate cumulative positions from right to left
            cumulative = 0
            for idx, row in left_groups.iterrows():
                cumulative += row["percentage"]
                left_groups.loc[idx, "text_x"] = -(cumulative - row["percentage"] / 2)

        # position right side groups (D, No vulnerable)
        if not right_groups.empty:
            group_order = {"D": 1, "No vulnerable": 2}
            right_groups["group_order"] = right_groups["grupo"].map(group_order)  # type: ignore[reportArgumentType]
            right_groups = right_groups.sort_values("group_order")

            # calculate cumulative positions from left to right
            cumulative = 0
            for idx, row in right_groups.iterrows():
                right_groups.loc[idx, "text_x"] = cumulative + row["percentage"] / 2
                cumulative += row["percentage"]

        # update the main dataframe
        if not left_groups.empty:
            df_labels.loc[source_mask & (df_labels["position"] == -1), "text_x"] = left_groups["text_x"].to_numpy()
        if not right_groups.empty:
            df_labels.loc[source_mask & (df_labels["position"] == 1), "text_x"] = right_groups["text_x"].to_numpy()

    df_labels["text_label"] = df_labels["percentage"].round(1).astype(str) + "%"

    text_chart = (
        alt.Chart(df_labels)
        .mark_text(align="center", baseline="middle", fontSize=16, color="black", dy=5)
        .encode(
            y=alt.Y("source:N", sort=["ZASCA", "SISBÉN Nacional", "Otros programas de apoyo"]),
            x=alt.X("text_x:Q"),
            text=alt.Text("text_label:N"),
        )
    )

    # add vertical line at x=0 to separate vulnerable from non-vulnerable
    vertical_line = alt.Chart(pd.DataFrame({"x": [0]})).mark_rule(color="black", strokeWidth=2).encode(x=alt.X("x:Q"))

    # combine chart, text, and vertical line
    combined_chart = chart + text_chart + vertical_line

    return (
        combined_chart.configure_view(strokeWidth=0)
        .configure_axis(domain=False, ticks=False, labels=False, grid=False)
        .configure_axisY(labels=False, title=None, labelPadding=10, labelFontSize=14)
        .configure_axisX(labels=False, title=None, labelFontSize=12)
    )


if __name__ == "__main__":
    # load processed data
    processed_dir = Path(DATA_DIR) / "02_processed" / "descriptive" / "manufactura"
    df_plot = pd.read_csv(processed_dir / "sisben_groups.csv", encoding="utf-8-sig")

    # create and save plot
    chart = plot_sisben_groups_diverging(df_plot)

    # save as png
    output_dir = Path(DATA_DIR) / "03_outputs" / "descriptive" / "manufactura"
    output_dir.mkdir(parents=True, exist_ok=True)
    chart.save(str(output_dir / "sisben_groups_diverging.png"), scale_factor=2.0, ppi=300)

    logger.info("saved Sisbén groups diverging chart to %s", output_dir / "sisben_groups_diverging.png")
