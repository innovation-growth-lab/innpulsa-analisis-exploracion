"""Create formality indicator dumbbell plots for ZASCA and EMICRON data."""

import altair as alt
import pandas as pd


def plot_formality_dumbbell_by_indicator(df_plot: pd.DataFrame) -> alt.VConcatChart:
    """Create separate dumbbell plots for each formality indicator.

    Args:
        df_plot: the dataframe generated by the 'formality' function.

    Returns:
        alt.VConcatChart: Separate dumbbell plots for each indicator.

    """
    # define colors for each source
    color_scale = alt.Scale(
        domain=["ZASCA", "EMICRON"],
        range=["#00B2A2", "#FF5836"],  # green, orange
    )

    charts = []

    # get unique indicators in order
    indicators = ["Registro RUT", "Contabilidad", "Acceso a Crédito"]

    for i, indicator in enumerate(indicators):
        indicator_data = df_plot.loc[df_plot["indicator"] == indicator]
        is_last = i == len(indicators) - 1

        # x-axis configuration: show labels only on last chart, keep 10% grid on all
        x_config = alt.X(
            "proportion:Q",
            title="Proporción (%)" if is_last else "",
            scale=alt.Scale(domain=[0, 1]),
            axis=(
                alt.Axis(format=".0%", tickCount=11, grid=True, labelFontSize=8, titleFontSize=10)
                if is_last
                else alt.Axis(format=".0%", tickCount=11, grid=True, labels=False, ticks=False, title="")
            ),
        )

        # determine sort order
        if indicator in {"Registro RUT", "Acceso a Crédito"}:
            y_sort = ["Sí", "No"]
        elif indicator == "Contabilidad":
            y_sort = [
                "No lleva registros",
                "Cuentas en la cabeza",
                "Registros informales",
                "Libros contables formales",
                "Excel/Software",
            ]
        else:
            y_sort = alt.SortField("category")

        chart = (
            alt.Chart(indicator_data)
            .mark_circle(size=600, stroke="black", strokeWidth=1)
            .encode(
                x=x_config,
                y=alt.Y(
                    "category:N",
                    title="",
                    sort=y_sort,
                    axis=alt.Axis(labelFontSize=8, titleFontSize=10),
                ),
                color=alt.Color(
                    "source:N",
                    scale=color_scale,
                    legend=alt.Legend(
                        orient="bottom",
                        direction="horizontal",
                        columns=2,
                        title=None,
                        labelExpr="''",
                        symbolSize=200,
                        symbolStrokeWidth=1,
                        padding=0,
                        offset=15,
                        columnPadding=60,
                    ),
                ),
            )
        )

        # add connecting lines between sources for each category
        lines = (
            alt.Chart(indicator_data)
            .mark_rule(stroke="gray", opacity=0.3, strokeWidth=1, strokeDash=[5, 5])
            .encode(
                x=alt.X("proportion:Q"),
                y=alt.Y("category:N", axis=None, title=None, sort=y_sort),
                detail="category:N",
            )
            .transform_aggregate(min_x="min(proportion)", max_x="max(proportion)", groupby=["category"])
            .encode(
                x=alt.X("min_x:Q"),
                x2=alt.X2("max_x:Q"),
                y=alt.Y("category:N", axis=None, title=None, sort=y_sort),
            )
        )

        # value labels inside each circle for all points
        value_labels = (
            alt.Chart(indicator_data)
            .mark_text(baseline="middle", align="center", dy=0.5, fontSize=8, color="white", fontWeight="bold")
            .encode(
                x=alt.X("proportion:Q"),
                y=alt.Y("category:N", axis=None, title=None, sort=y_sort),
                text=alt.Text("proportion:Q", format=".0%"),
            )
        )

        # layer the charts and apply properties
        layered_chart = alt.layer(lines, chart, value_labels)

        # determine height based on indicator (bigger for Contabilidad with many categories)
        height = 120 if indicator == "Contabilidad" else 50

        charts.append(
            layered_chart.properties(
                width=300,
                height=height,
                title=alt.TitleParams(text=indicator, fontSize=10),
            ).resolve_scale(x="shared", y="independent")
        )

    return alt.vconcat(*charts, spacing=8)
