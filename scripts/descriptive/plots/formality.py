"""Create formality indicator plots for ZASCA and EMICRON data."""

import altair as alt
import pandas as pd


def plot_formality_by_indicator(df_plot: pd.DataFrame) -> alt.VConcatChart:
    """Create separate butterfly charts for each formality indicator.

    Args:
        df_plot: the dataframe generated by the 'formality' function with common/excess structure.

    Returns:
        alt.VConcatChart: Separate butterfly plots for each indicator.

    """
    color_scale = alt.Scale(
        domain=["ZASCA_common", "ZASCA_ZASCA", "EMICRON_common", "EMICRON_EMICRON"],
        range=["#00B2A2", "#66D1C7", "#FF5836", "#FFAC9B"],
    )

    charts = []
    indicators = ["Registro RUT", "Contabilidad", "Acceso a Crédito"]

    for indicator in indicators:
        indicator_data = df_plot.loc[df_plot["indicator"] == indicator].copy()

        # determine sort order
        if indicator in {"Registro RUT", "Acceso a Crédito"}:
            category_sort = ["Sí", "No"]
        elif indicator == "Contabilidad":
            category_sort = [
                "No lleva registros",
                "Cuentas en la cabeza",
                "Registros informales",
                "Libros contables formales",
                "Excel/Software",
            ]
        else:
            category_sort = None

        # create bars
        chart = (
            alt.Chart(indicator_data)
            .mark_bar()
            .encode(
                y=alt.Y(
                    "category:N",
                    axis=alt.Axis(
                        labels=True, title="", grid=False, ticks=False, domain=False, labelFontSize=10, labelPadding=15
                    ),
                    sort=category_sort,
                ),
                x=alt.X(
                    "plot_value:Q",
                    axis=alt.Axis(labels=False, title=None, grid=False, ticks=False, domain=False),
                ),
                color=alt.Color("color_category:N", scale=color_scale, legend=None),
                order=alt.Order("type:N", sort="descending"),
            )
        )

        # calculate total values for each source per category
        df_totals = indicator_data.groupby(["category", "source"])["plot_value"].sum().reset_index()
        df_totals["abs_value"] = df_totals["plot_value"].abs()
        # use larger offset for RUT/Credit (shorter bars), smaller for Contabilidad
        offset_multiplier = 8 if indicator in {"Registro RUT", "Acceso a Crédito"} else 6
        df_totals["x_offset"] = df_totals["plot_value"] + offset_multiplier * df_totals["plot_value"].apply(
            lambda x: -1 if x < 0 else 1
        )
        df_totals["text_label"] = df_totals["abs_value"].round(0).astype(int).astype(str) + "%"

        # add text labels showing total percentages
        text_chart = (
            alt.Chart(df_totals)
            .mark_text(align="center", baseline="middle", fontSize=10, color="black")
            .encode(
                y=alt.Y("category:N", sort=category_sort),
                x=alt.X("x_offset:Q"),
                text=alt.Text("text_label:N"),
            )
        )

        # determine height based on indicator
        height = 120 if indicator == "Contabilidad" else 42

        combined_chart = (chart + text_chart).properties(
            width=500,
            height=height,
            title=alt.TitleParams(text=indicator, fontSize=12),
        )

        charts.append(combined_chart)

    return alt.vconcat(*charts, spacing=25).configure_view(strokeWidth=0)


def _plot_formality_by_indicator_base(df_plot: pd.DataFrame, hide_y_labels: bool = False) -> alt.VConcatChart:
    """Create formality charts without configuration for use in combined charts.

    Args:
        df_plot: the dataframe generated by the 'formality' function with common/excess structure.
        hide_y_labels: whether to hide the y-axis labels.

    Returns:
        alt.VConcatChart: Separate formality charts for each indicator.

    """
    color_scale = alt.Scale(
        domain=["ZASCA_common", "ZASCA_ZASCA", "EMICRON_common", "EMICRON_EMICRON"],
        range=["#00B2A2", "#66D1C7", "#FF5836", "#FFAC9B"],
    )

    charts = []
    indicators = ["Registro RUT", "Contabilidad", "Acceso a Crédito"]

    for indicator in indicators:
        indicator_data = df_plot.loc[df_plot["indicator"] == indicator].copy()

        # determine sort order
        if indicator in {"Registro RUT", "Acceso a Crédito"}:
            category_sort = ["Sí", "No"]
        elif indicator == "Contabilidad":
            category_sort = [
                "No lleva registros",
                "Cuentas en la cabeza",
                "Registros informales",
                "Libros contables formales",
                "Excel/Software",
            ]
        else:
            category_sort = None

        # create bars
        chart = (
            alt.Chart(indicator_data)
            .mark_bar()
            .encode(
                y=alt.Y(
                    "category:N",
                    axis=alt.Axis(
                        labels=not hide_y_labels,
                        title="",
                        grid=False,
                        ticks=False,
                        domain=False,
                        labelFontSize=10,
                        labelPadding=15,
                    ),
                    sort=category_sort,
                ),
                x=alt.X(
                    "plot_value:Q",
                    axis=alt.Axis(labels=False, title=None, grid=False, ticks=False, domain=False),
                ),
                color=alt.Color("color_category:N", scale=color_scale, legend=None),
                order=alt.Order("type:N", sort="descending"),
            )
        )

        # calculate total values for each source per category
        df_totals = indicator_data.groupby(["category", "source"])["plot_value"].sum().reset_index()
        df_totals["abs_value"] = df_totals["plot_value"].abs()
        # use larger offset for RUT/Credit (shorter bars), smaller for Contabilidad
        offset_multiplier = 8 if indicator in {"Registro RUT", "Acceso a Crédito"} else 6
        df_totals["x_offset"] = df_totals["plot_value"] + offset_multiplier * df_totals["plot_value"].apply(
            lambda x: -1 if x < 0 else 1
        )
        df_totals["text_label"] = df_totals["abs_value"].round(0).astype(int).astype(str) + "%"

        # add text labels showing total percentages
        text_chart = (
            alt.Chart(df_totals)
            .mark_text(align="center", baseline="middle", fontSize=10, color="black")
            .encode(
                y=alt.Y("category:N", sort=category_sort),
                x=alt.X("x_offset:Q"),
                text=alt.Text("text_label:N"),
            )
        )

        # determine height based on indicator
        height = 120 if indicator == "Contabilidad" else 42

        combined_chart = (chart + text_chart).properties(
            width=250,
            height=height,
            title=alt.TitleParams(text=indicator, fontSize=12),
        )

        charts.append(combined_chart)

    return alt.vconcat(*charts, spacing=25)


def plot_formality_by_indicator_combined(df_manu: pd.DataFrame, df_agro: pd.DataFrame) -> alt.HConcatChart:
    """Create side-by-side formality charts for manufacturing and agro sectors.

    Args:
        df_manu: manufacturing formality data
        df_agro: agro formality data

    Returns:
        alt.HConcatChart: Side-by-side formality plots

    """
    # Create agro chart (first) - with y-axis labels
    chart_agro = _plot_formality_by_indicator_base(df_agro, hide_y_labels=False)

    # Create manufacturing chart (second) - hide y-axis labels
    chart_manu = _plot_formality_by_indicator_base(df_manu, hide_y_labels=True)

    # Create the combined chart - agro first, manufactura second
    combined_chart = alt.hconcat(chart_agro, chart_manu, spacing=30)

    # Apply configuration to the combined chart
    return combined_chart.configure_view(strokeWidth=0)
