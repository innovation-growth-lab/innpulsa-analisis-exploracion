"""Create scatter plot for department representation vs ISEM scores."""

import logging
from pathlib import Path

import altair as alt
import pandas as pd

from innpulsa.settings import DATA_DIR

logger = logging.getLogger("innpulsa.scripts.descriptive.plots.department_representation")


def plot_department_representation_scatter(df_plot: pd.DataFrame) -> alt.HConcatChart:
    """Create side-by-side scatter plots of ZASCA beneficiary counts vs ISEM scores by sector.

    Args:
        df_plot: the dataframe generated by the 'department_representation_analysis' function.
                 Should include 'sector' column with 'agro' and 'manufactura' values.

    Returns:
        an altair chart object with two plots side by side.

    """
    # prepare data for plotting
    df_plot = df_plot.copy()
    df_plot = df_plot.dropna(subset=["isem_score"])

    # split by sector
    df_agro: pd.DataFrame = df_plot[df_plot["sector"] == "agro"].copy()  # type: ignore[reportAssignmentType]
    df_manufactura: pd.DataFrame = df_plot[df_plot["sector"] == "manufactura"].copy()  # type: ignore[reportAssignmentType]

    # create separate dataframes for special label positioning
    df_agro_special = df_agro.loc[df_agro["dept_name"] == "Valle Del Cauca"].copy()
    df_agro_normal = df_agro.loc[df_agro["dept_name"] != "Valle Del Cauca"].copy()

    df_manufactura_special_valle = df_manufactura.loc[df_manufactura["dept_name"] == "Valle Del Cauca"].copy()
    df_manufactura_special_tolima = df_manufactura.loc[df_manufactura["dept_name"] == "Tolima"].copy()
    df_manufactura_normal = df_manufactura.loc[~df_manufactura["dept_name"].isin(["Valle Del Cauca", "Tolima"])].copy()

    # determine shared y-axis scale (capped at 6.5)
    y_scale = alt.Scale(
        domain=[
            min(df_plot["isem_score"].min() - 0.2, 2.5),
            6.5,
        ]
    )

    # AGRO chart - using brand green
    agro_points = (
        alt.Chart(df_agro)
        .mark_circle(size=200, opacity=0.8, color="#00B2A2")
        .encode(
            x=alt.X(
                "zasca_count:Q",
                axis=alt.Axis(title="Número de beneficiarios ZASCA", labelFontSize=11),
                scale=alt.Scale(zero=True),
            ),
            y=alt.Y(
                "isem_score:Q",
                axis=alt.Axis(title="Índice Subnacional de Emprendimiento", labelFontSize=11),
                scale=y_scale,
            ),
            tooltip=[
                alt.Tooltip("dept_name:N", title="Departamento"),
                alt.Tooltip("zasca_count:Q", title="Beneficiarios ZASCA", format=".0f"),
                alt.Tooltip("isem_score:Q", title="Puntaje ISEM", format=".2f"),
            ],
        )
    )

    # Normal labels (left-aligned, to the right of points)
    agro_text_normal = (
        alt.Chart(df_agro_normal)
        .mark_text(
            align="left",
            baseline="middle",
            fontSize=10,
            color="black",
            fontWeight="normal",
            dx=10,
            dy=0,
        )
        .encode(
            x=alt.X("zasca_count:Q"),
            y=alt.Y("isem_score:Q", scale=y_scale),
            text=alt.Text("dept_name:N"),
        )
    )

    # Valle Del Cauca label (right-aligned, to the left of point)
    agro_text_special = (
        alt.Chart(df_agro_special)
        .mark_text(
            align="right",
            baseline="middle",
            fontSize=10,
            color="black",
            fontWeight="normal",
            dx=-10,
            dy=0,
        )
        .encode(
            x=alt.X("zasca_count:Q"),
            y=alt.Y("isem_score:Q", scale=y_scale),
            text=alt.Text("dept_name:N"),
        )
    )

    agro_chart = (agro_points + agro_text_normal + agro_text_special).properties(
        width=420,
        height=400,
    )

    # MANUFACTURA chart - using brand blue
    manufactura_points = (
        alt.Chart(df_manufactura)
        .mark_circle(size=200, opacity=0.8, color="#1F5DAD")
        .encode(
            x=alt.X(
                "zasca_count:Q",
                axis=alt.Axis(
                    title="Número de beneficiarios ZASCA",
                    labelFontSize=11,
                    values=[0, 100, 200, 300, 400, 500, 600, 700],
                ),
                scale=alt.Scale(zero=True),
            ),
            y=alt.Y(
                "isem_score:Q",
                axis=alt.Axis(title="", labelFontSize=11),
                scale=y_scale,
            ),
            tooltip=[
                alt.Tooltip("dept_name:N", title="Departamento"),
                alt.Tooltip("zasca_count:Q", title="Beneficiarios ZASCA", format=".0f"),
                alt.Tooltip("isem_score:Q", title="Puntaje ISEM", format=".2f"),
            ],
        )
    )

    # Normal labels (left-aligned, to the right of points)
    manufactura_text_normal = (
        alt.Chart(df_manufactura_normal)
        .mark_text(
            align="left",
            baseline="middle",
            fontSize=10,
            color="black",
            fontWeight="normal",
            dx=10,
            dy=0,
        )
        .encode(
            x=alt.X("zasca_count:Q"),
            y=alt.Y("isem_score:Q", scale=y_scale),
            text=alt.Text("dept_name:N"),
        )
    )

    # Valle Del Cauca label (right-aligned, to the left of point)
    manufactura_text_valle = (
        alt.Chart(df_manufactura_special_valle)
        .mark_text(
            align="right",
            baseline="middle",
            fontSize=10,
            color="black",
            fontWeight="normal",
            dx=-10,
            dy=0,
        )
        .encode(
            x=alt.X("zasca_count:Q"),
            y=alt.Y("isem_score:Q", scale=y_scale),
            text=alt.Text("dept_name:N"),
        )
    )

    # Tolima label (above the point)
    manufactura_text_tolima = (
        alt.Chart(df_manufactura_special_tolima)
        .mark_text(
            align="center",
            baseline="bottom",
            fontSize=10,
            color="black",
            fontWeight="normal",
            dx=0,
            dy=-10,
        )
        .encode(
            x=alt.X("zasca_count:Q"),
            y=alt.Y("isem_score:Q", scale=y_scale),
            text=alt.Text("dept_name:N"),
        )
    )

    manufactura_chart = (
        manufactura_points + manufactura_text_normal + manufactura_text_valle + manufactura_text_tolima
    ).properties(
        width=420,
        height=400,
    )

    # combine side by side
    combined = alt.hconcat(agro_chart, manufactura_chart).resolve_scale(y="shared")

    return (
        combined.configure_view(strokeWidth=0)
        .configure_axis(domain=True, ticks=True, labels=True, grid=False)
        .configure_title(anchor="middle")
    )


if __name__ == "__main__":
    # load processed data
    processed_dir = Path(DATA_DIR) / "02_processed" / "descriptive" / "all"
    df_plot = pd.read_csv(processed_dir / "department_representation.csv", encoding="utf-8-sig")

    # create and save plot
    chart = plot_department_representation_scatter(df_plot)

    # save as png
    output_dir = Path(DATA_DIR) / "03_outputs" / "descriptive" / "all"
    output_dir.mkdir(parents=True, exist_ok=True)
    chart.save(str(output_dir / "department_representation_scatter.png"), scale_factor=2.0, ppi=300)

    logger.info(
        "saved department representation scatter plot to %s", output_dir / "department_representation_scatter.png"
    )
