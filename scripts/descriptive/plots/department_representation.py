"""Create scatter plot for department representation vs ISEM scores."""

import logging
from pathlib import Path

import altair as alt
import pandas as pd

from innpulsa.settings import DATA_DIR

logger = logging.getLogger("innpulsa.scripts.descriptive.plots.department_representation")


def plot_department_representation_scatter(df_plot: pd.DataFrame) -> alt.LayerChart:
    """Create a scatter plot comparing representation ratio vs ISEM scores.

    Args:
        df_plot: the dataframe generated by the 'department_representation_analysis' function.

    Returns:
        an altair chart object.

    """
    # prepare data for plotting - filter out NaN representation ratios
    df_plot = df_plot.copy()
    df_plot = df_plot.dropna(subset=["representation_ratio", "isem_score"])

    # define color scheme using team colors
    color_scale = alt.Scale(
        domain=["Mayor", "Menor"],
        range=["#FF5836", "#00B2A2"],  # red for overrepresented, green for underrepresented
    )

    # create the scatter plot
    chart = (
        alt.Chart(df_plot)
        .mark_circle(size=100, opacity=0.8)
        .encode(
            x=alt.X(
                "zasca_count:Q",
                axis=alt.Axis(title="Número de beneficiarios en ZASCA", labelFontSize=12),
                scale=alt.Scale(zero=False),
            ),
            y=alt.Y(
                "isem_score:Q",
                axis=alt.Axis(title="Índice Subnacional de Emprendimiento", labelFontSize=12),
                scale=alt.Scale(zero=False),
            ),
            color=alt.Color(
                "status:N",
                scale=color_scale,
                legend=alt.Legend(
                    title="Representación ZASCA/nación", labelFontSize=12, orient="bottom-right", direction="horizontal"
                ),
            ),
            tooltip=[
                alt.Tooltip("COD_DEPTO:O", title="Department Code"),
                alt.Tooltip("representation_ratio:Q", title="Representation Ratio", format=".2f"),
                alt.Tooltip("isem_score:Q", title="ISEM Score", format=".2f"),
                alt.Tooltip("zasca_count:Q", title="Número de beneficiarios en ZASCA"),
                alt.Tooltip("emicron_population:Q", title="EMICRON Population", format=".0f"),
            ],
        )
        .properties(
            width=400,
            height=400,
        )
    )

    # add text labels for department names
    text_chart = (
        alt.Chart(df_plot)
        .mark_text(align="center", baseline="middle", fontSize=10, color="black", fontWeight="bold", dx=0, dy=-10)
        .encode(
            x=alt.X("zasca_count:Q"),
            y=alt.Y("isem_score:Q"),
            text=alt.Text("dept_name:N"),
        )
    )

    # combine chart and text
    combined_chart = chart + text_chart

    return (
        combined_chart.configure_view(strokeWidth=0)
        .configure_axis(domain=True, ticks=True, labels=True, grid=False)
        .configure_axisX(domain=True, ticks=True, labels=True, grid=False)
        .configure_axisY(domain=True, ticks=True, labels=True, grid=False)
    )


if __name__ == "__main__":
    # load processed data
    processed_dir = Path(DATA_DIR) / "02_processed" / "descriptive" / "manufactura"
    df_plot = pd.read_csv(processed_dir / "department_representation.csv", encoding="utf-8-sig")

    # create and save plot
    chart = plot_department_representation_scatter(df_plot)

    # save as png
    output_dir = Path(DATA_DIR) / "03_outputs" / "descriptive" / "manufactura"
    output_dir.mkdir(parents=True, exist_ok=True)
    chart.save(str(output_dir / "department_representation_scatter.png"), scale_factor=2.0, ppi=300)

    logger.info(
        "saved department representation scatter plot to %s", output_dir / "department_representation_scatter.png"
    )
