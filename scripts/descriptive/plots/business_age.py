"""Create raincloud plots for business age distribution analysis."""

import logging
from pathlib import Path

import altair as alt
import pandas as pd

from innpulsa.settings import DATA_DIR

logger = logging.getLogger("innpulsa.scripts.descriptive.plots.business_age")


def plot_business_age_raincloud(df_plot: pd.DataFrame) -> alt.VConcatChart:
    """Create raincloud plot for ZASCA data.

    Args:
        df_plot: the dataframe generated by the 'business_age_analysis' function.

    Returns:
        alt.Chart: ZASCA raincloud plot.

    """
    zasca_data = df_plot.loc[df_plot["source"] == "ZASCA"]

    # density plot
    density = (
        alt.Chart(zasca_data)
        .transform_density(
            density="business_age",
            as_=["business_age", "density"],
            bandwidth=1.0,
        )
        .mark_area(opacity=1, interpolate="monotone", color="#00B2A2", stroke="black", strokeWidth=1)
        .encode(
            x=alt.X(
                "business_age:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
            y=alt.Y(
                "density:Q",
                axis=None,
                scale=alt.Scale(zero=True),
            ),
        )
        .properties(width=300, height=65)
    )

    # boxplot
    boxplot = (
        alt.Chart(zasca_data)
        .mark_boxplot(size=20, opacity=1, color="#00B2A2")
        .encode(
            x=alt.X(
                "business_age:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
        )
        .properties(width=300, height=15)
    )

    # scatter plot with jitter (below boxplot)
    scatter = (
        alt.Chart(zasca_data)
        .mark_circle(size=8, opacity=0.2, color="#00B2A2")
        .encode(
            x=alt.X(
                "business_age:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
            y=alt.Y(
                "jitter:Q",
                axis=None,
                scale=alt.Scale(domain=[-0.5, 0.5]),
            ),
        )
        .transform_calculate(jitter="(random() - 0.5) * 0.4")
        .properties(width=300, height=15)
    )

    # combine density with superposed boxplot and scatter
    raincloud = alt.vconcat(density, (boxplot + scatter), spacing=5)

    return (
        raincloud.properties()
        .configure_view(strokeWidth=0)
        .configure_axis(domain=False, ticks=False, labels=False, grid=False)
    )


def plot_business_age_raincloud_emicron(df_plot: pd.DataFrame) -> alt.VConcatChart:
    """Create raincloud plot for EMICRON data.

    Args:
        df_plot: the dataframe generated by the 'business_age_analysis' function.

    Returns:
        alt.Chart: EMICRON raincloud plot.

    """
    emicron_data = df_plot.loc[df_plot["source"] == "EMICRON"]

    # density plot
    density = (
        alt.Chart(emicron_data)
        .transform_density(
            density="business_age",
            as_=["business_age", "density"],
            bandwidth=1.0,
        )
        .mark_area(opacity=1, interpolate="monotone", color="#FF5836", stroke="black", strokeWidth=1)
        .encode(
            x=alt.X(
                "business_age:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
            y=alt.Y(
                "density:Q",
                axis=None,
                scale=alt.Scale(zero=True),
            ),
        )
        .properties(width=300, height=65)
    )

    # boxplot
    boxplot = (
        alt.Chart(emicron_data)
        .mark_boxplot(size=20, opacity=1, color="#FF5836")
        .encode(
            x=alt.X(
                "business_age:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
        )
        .properties(width=300, height=15)
    )

    # scatter plot with jitter (below boxplot)
    scatter = (
        alt.Chart(emicron_data)
        .mark_circle(size=8, opacity=0.2, color="#FF5836")
        .encode(
            x=alt.X(
                "business_age:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
            y=alt.Y(
                "jitter:Q",
                axis=None,
                scale=alt.Scale(domain=[-0.5, 0.5]),
            ),
        )
        .transform_calculate(jitter="(random() - 0.5) * 0.4")
        .properties(width=300, height=15)
    )

    # create a separate axis chart
    axis_chart = (
        alt.Chart(emicron_data)
        .mark_rule(opacity=0)
        .encode(
            x=alt.X(
                "business_age:Q",
                axis=alt.Axis(
                    title="Edad del Negocio (años)",
                    labelFontSize=12,
                    tickCount=6,
                    values=[0, 10, 20, 30, 40, 50],
                ),
                scale=alt.Scale(domain=[0, 50]),
            ),
        )
        .properties(width=300, height=5)
    )

    # combine density with superposed boxplot and scatter, then add axis
    raincloud = alt.vconcat(density, (boxplot + scatter), axis_chart, spacing=5)

    return raincloud.properties().configure_view(strokeWidth=0).resolve_scale(x="independent")


def plot_sector_experience_raincloud(df_plot: pd.DataFrame) -> alt.VConcatChart:
    """Create raincloud plot for ZASCA sector experience data.

    Args:
        df_plot: the dataframe generated by the 'business_age_analysis' function.

    Returns:
        alt.Chart: Sector experience raincloud plot.

    """
    # filter for ZASCA data only and remove NaN values
    zasca_data = df_plot.loc[df_plot["source"] == "ZASCA"].copy()
    zasca_data = zasca_data.dropna(subset=["sector_experience"])

    # density plot
    density = (
        alt.Chart(zasca_data)
        .transform_density(
            density="sector_experience",
            as_=["sector_experience", "density"],
            bandwidth=1.0,
        )
        .mark_area(opacity=1, interpolate="monotone", color="#3C82DC", stroke="black", strokeWidth=1)
        .encode(
            x=alt.X(
                "sector_experience:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
            y=alt.Y(
                "density:Q",
                axis=None,
                scale=alt.Scale(zero=True),
            ),
        )
        .properties(width=300, height=65)
    )

    # boxplot
    boxplot = (
        alt.Chart(zasca_data)
        .mark_boxplot(size=20, opacity=1, color="#3C82DC")
        .encode(
            x=alt.X(
                "sector_experience:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
        )
        .properties(width=300, height=15)
    )

    # scatter plot with jitter (below boxplot)
    scatter = (
        alt.Chart(zasca_data)
        .mark_circle(size=8, opacity=0.2, color="#3C82DC")
        .encode(
            x=alt.X(
                "sector_experience:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
            y=alt.Y(
                "jitter:Q",
                axis=None,
                scale=alt.Scale(domain=[-0.5, 0.5]),
            ),
        )
        .transform_calculate(jitter="(random() - 0.5) * 0.4")
        .properties(width=300, height=15)
    )

    # create a separate axis chart
    axis_chart = (
        alt.Chart(zasca_data)
        .mark_rule(opacity=0)
        .encode(
            x=alt.X(
                "sector_experience:Q",
                axis=alt.Axis(
                    title="Experiencia en el Sector (años)",
                    labelFontSize=12,
                    tickCount=6,
                    values=[0, 10, 20, 30, 40, 50],
                ),
                scale=alt.Scale(domain=[0, 50]),
            ),
        )
        .properties(width=300, height=5)
    )

    # combine density with superposed boxplot and scatter, then add axis
    raincloud = alt.vconcat(density, (boxplot + scatter), axis_chart, spacing=5)

    return raincloud.properties().configure_view(strokeWidth=0).resolve_scale(x="independent")


def plot_total_experience_raincloud(df_plot: pd.DataFrame) -> alt.VConcatChart:
    """Create raincloud plot for ZASCA total experience data.

    Args:
        df_plot: the dataframe generated by the 'business_age_analysis' function.

    Returns:
        alt.Chart: Total experience raincloud plot.

    """
    # filter for ZASCA data only and remove NaN values
    zasca_data = df_plot.loc[df_plot["source"] == "ZASCA"].copy()
    zasca_data = zasca_data.dropna(subset=["total_experience"])

    # density plot
    density = (
        alt.Chart(zasca_data)
        .transform_density(
            density="total_experience",
            as_=["total_experience", "density"],
            bandwidth=1.0,
        )
        .mark_area(opacity=1, interpolate="monotone", color="#3C82DC", stroke="black", strokeWidth=1)
        .encode(
            x=alt.X(
                "total_experience:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
            y=alt.Y(
                "density:Q",
                axis=None,
                scale=alt.Scale(zero=True),
            ),
        )
        .properties(width=300, height=65)
    )

    # boxplot
    boxplot = (
        alt.Chart(zasca_data)
        .mark_boxplot(size=20, opacity=1, color="#3C82DC")
        .encode(
            x=alt.X(
                "total_experience:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
        )
        .properties(width=300, height=15)
    )

    # scatter plot with jitter (below boxplot)
    scatter = (
        alt.Chart(zasca_data)
        .mark_circle(size=8, opacity=0.2, color="#3C82DC")
        .encode(
            x=alt.X(
                "total_experience:Q",
                axis=None,
                scale=alt.Scale(domain=[0, 50]),
            ),
            y=alt.Y(
                "jitter:Q",
                axis=None,
                scale=alt.Scale(domain=[-0.5, 0.5]),
            ),
        )
        .transform_calculate(jitter="(random() - 0.5) * 0.4")
        .properties(width=300, height=15)
    )

    # create a separate axis chart
    axis_chart = (
        alt.Chart(zasca_data)
        .mark_rule(opacity=0)
        .encode(
            x=alt.X(
                "total_experience:Q",
                axis=alt.Axis(
                    title="Experiencia Total",
                    labelFontSize=12,
                    tickCount=6,
                    values=[0, 10, 20, 30, 40, 50],
                ),
                scale=alt.Scale(domain=[0, 50]),
            ),
        )
        .properties(width=300, height=5)
    )

    # combine density with superposed boxplot and scatter, then add axis
    raincloud = alt.vconcat(density, (boxplot + scatter), axis_chart, spacing=5)

    return raincloud.properties().configure_view(strokeWidth=0).resolve_scale(x="independent")


if __name__ == "__main__":
    processed_dir = Path(DATA_DIR) / "02_processed" / "descriptive" / "manufactura"
    df_plot = pd.read_csv(processed_dir / "business_age.csv", encoding="utf-8-sig")

    # create and save raincloud plots
    zasca_chart = plot_business_age_raincloud(df_plot)
    emicron_chart = plot_business_age_raincloud_emicron(df_plot)
    sector_exp_chart = plot_sector_experience_raincloud(df_plot)
    total_exp_chart = plot_total_experience_raincloud(df_plot)

    # save as png
    output_dir = Path(DATA_DIR) / "03_outputs" / "descriptive" / "manufactura"
    output_dir.mkdir(parents=True, exist_ok=True)

    zasca_chart.save(str(output_dir / "business_age_raincloud_zasca.png"), scale_factor=2.0, ppi=300)
    emicron_chart.save(str(output_dir / "business_age_raincloud_emicron.png"), scale_factor=2.0, ppi=300)
    sector_exp_chart.save(str(output_dir / "sector_experience_raincloud.png"), scale_factor=2.0, ppi=300)
    total_exp_chart.save(str(output_dir / "total_experience_raincloud.png"), scale_factor=2.0, ppi=300)

    logger.info("saved business age, sector experience, and total experience raincloud plots")
