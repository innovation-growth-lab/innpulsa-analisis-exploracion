"""Create raincloud plots for sales distribution analysis."""

import logging
from pathlib import Path

import altair as alt
import pandas as pd

from innpulsa.settings import DATA_DIR

logger = logging.getLogger("innpulsa.scripts.descriptive.plots.sales")


def plot_sales_raincloud_zasca(df_plot: pd.DataFrame) -> alt.VConcatChart:
    """Create raincloud plot for ZASCA sales data.

    Args:
        df_plot: the dataframe generated by the 'sales' function.

    Returns:
        alt.Chart: ZASCA raincloud plot.

    """
    zasca_data = df_plot.loc[df_plot["source"] == "ZASCA"].copy()

    # create count data for bar chart using pre-calculated categories
    sales_counts = zasca_data["sales_category"].value_counts().reset_index()
    sales_counts.columns = ["sales_category", "count"]

    # calculate percentages
    total_count = sales_counts["count"].sum()
    sales_counts["percentage"] = (sales_counts["count"] / total_count * 100).round(1)
    sales_counts["percentage_label"] = sales_counts["percentage"].astype(str) + "%"

    # add dollar symbols to category labels
    sales_counts["dollar_label"] = "$" + sales_counts["sales_category"]

    # bar chart
    bars = (
        alt.Chart(sales_counts)
        .mark_bar(opacity=1, color="#00B2A2", stroke="black", strokeWidth=1)
        .encode(
            x=alt.X(
                "sales_category:O",
                axis=alt.Axis(title=""),
                sort=["1-10M", "10-50M", "50-200M", "200M-1B", "1B+"],
            ),
            y=alt.Y(
                "count:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(zero=True),
            ),
        )
        .properties(width=500, height=75)
    )

    # text annotations on top of bars
    text_labels = (
        alt.Chart(sales_counts)
        .mark_text(align="center", baseline="bottom", fontSize=10, color="black")
        .encode(
            x=alt.X(
                "sales_category:O",
                axis=alt.Axis(title=""),
                sort=["1-10M", "10-50M", "50-200M", "200M-1B", "1B+"],
            ),
            y=alt.Y(
                "count:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(zero=True),
            ),
            text="dollar_label:O",
        )
        .properties(width=500, height=75)
    )

    # create numeric categories for jittering
    def category_to_numeric(category):
        mapping = {"1-10M": 1, "10-50M": 2, "50-200M": 3, "200M-1B": 4, "1B+": 5}
        return mapping.get(category, 1)

    zasca_data["category_numeric"] = zasca_data["sales_category"].apply(category_to_numeric)

    # scatter plot using category numbers with jitter
    scatter = (
        alt.Chart(zasca_data)
        .mark_circle(size=6, opacity=0.2, color="#00B2A2")
        .encode(
            x=alt.X(
                "jittered_category:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(domain=[0.5, 5.5]),
            ),
            y=alt.Y(
                "jitter_y:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(domain=[-0.5, 0.5]),
            ),
        )
        .transform_calculate(
            jitter_y="(random() - 0.5) * 0.4", jittered_category="datum.category_numeric + (random() - 0.5) * 0.8"
        )
        .properties(width=500, height=20)
    )

    # percentage labels at bottom of bars
    percentage_labels = (
        alt.Chart(sales_counts)
        .mark_text(align="center", baseline="bottom", fontSize=9, color="black")
        .encode(
            x=alt.X(
                "sales_category:O",
                axis=alt.Axis(title=""),
                sort=["1-10M", "10-50M", "50-200M", "200M-1B", "1B+"],
            ),
            y=alt.Y(
                "zero:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(zero=True),
            ),
            text="percentage_label:O",
        )
        .transform_calculate(zero="-75")
        .properties(width=500, height=75)
    )

    # combine bars with text labels, percentage labels, and scatter
    return (bars + text_labels + percentage_labels) & scatter


def plot_sales_raincloud_emicron(df_plot: pd.DataFrame) -> alt.VConcatChart:
    """Create raincloud plot for EMICRON sales data.

    Args:
        df_plot: the dataframe generated by the 'sales' function.

    Returns:
        alt.Chart: EMICRON raincloud plot.

    """
    emicron_data = df_plot.loc[df_plot["source"] == "EMICRON"].copy()

    # create count data for bar chart using pre-calculated categories
    sales_counts = emicron_data["sales_category"].value_counts().reset_index()
    sales_counts.columns = ["sales_category", "count"]

    # calculate percentages
    total_count = sales_counts["count"].sum()
    sales_counts["percentage"] = (sales_counts["count"] / total_count * 100).round(1)
    sales_counts["percentage_label"] = sales_counts["percentage"].astype(str) + "%"

    # add dollar symbols to category labels
    sales_counts["dollar_label"] = "$" + sales_counts["sales_category"]

    # bar chart
    bars = (
        alt.Chart(sales_counts)
        .mark_bar(opacity=1, color="#FF5836", stroke="black", strokeWidth=1)
        .encode(
            x=alt.X(
                "sales_category:O",
                axis=alt.Axis(title=""),
                sort=["1-10M", "10-50M", "50-200M", "200M-1B", "1B+"],
            ),
            y=alt.Y(
                "count:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(zero=True),
            ),
        )
        .properties(width=500, height=75)
    )

    # text annotations on top of bars
    text_labels = (
        alt.Chart(sales_counts)
        .mark_text(align="center", baseline="bottom", fontSize=10, color="black")
        .encode(
            x=alt.X(
                "sales_category:O",
                axis=alt.Axis(title=""),
                sort=["1-10M", "10-50M", "50-200M", "200M-1B", "1B+"],
            ),
            y=alt.Y(
                "count:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(zero=True),
            ),
            text="dollar_label:O",
        )
        .properties(width=500, height=75)
    )

    # create numeric categories for jittering
    def category_to_numeric(category):
        mapping = {"1-10M": 1, "10-50M": 2, "50-200M": 3, "200M-1B": 4, "1B+": 5}
        return mapping.get(category, 1)

    emicron_data["category_numeric"] = emicron_data["sales_category"].apply(category_to_numeric)

    # scatter plot using category numbers with jitter
    scatter = (
        alt.Chart(emicron_data)
        .mark_circle(size=6, opacity=0.2, color="#FF5836")
        .encode(
            x=alt.X(
                "jittered_category:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(domain=[0.5, 5.5]),
            ),
            y=alt.Y(
                "jitter_y:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(domain=[-0.5, 0.5]),
            ),
        )
        .transform_calculate(
            jitter_y="(random() - 0.5) * 0.4", jittered_category="datum.category_numeric + (random() - 0.5) * 0.8"
        )
        .properties(width=500, height=20)
    )

    # percentage labels at bottom of bars
    percentage_labels = (
        alt.Chart(sales_counts)
        .mark_text(align="center", baseline="bottom", fontSize=9, color="black")
        .encode(
            x=alt.X(
                "sales_category:O",
                axis=alt.Axis(title=""),
                sort=["1-10M", "10-50M", "50-200M", "200M-1B", "1B+"],
            ),
            y=alt.Y(
                "zero:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(zero=True),
            ),
            text="percentage_label:O",
        )
        .transform_calculate(zero="-450")
        .properties(width=500, height=75)
    )

    # combine bars with text labels, percentage labels, and scatter
    return (bars + text_labels + percentage_labels) & scatter


def plot_sales_raincloud_rues(df_plot: pd.DataFrame) -> alt.VConcatChart:
    """Create raincloud plot for RUES sales data.

    Args:
        df_plot: the dataframe generated by the 'sales' function.

    Returns:
        alt.Chart: RUES raincloud plot.

    """
    rues_data = df_plot.loc[df_plot["source"] == "RUES"].copy()

    # create count data for bar chart using pre-calculated categories
    sales_counts = rues_data["sales_category"].value_counts().reset_index()
    sales_counts.columns = ["sales_category", "count"]

    # calculate percentages
    total_count = sales_counts["count"].sum()
    sales_counts["percentage"] = (sales_counts["count"] / total_count * 100).round(1)
    sales_counts["percentage_label"] = sales_counts["percentage"].astype(str) + "%"

    # add dollar symbols to category labels
    sales_counts["dollar_label"] = "$" + sales_counts["sales_category"]

    # bar chart
    bars = (
        alt.Chart(sales_counts)
        .mark_bar(opacity=1, color="#1F5DAD", stroke="black", strokeWidth=1)
        .encode(
            x=alt.X(
                "sales_category:O",
                axis=alt.Axis(
                    title="",
                    labelFontSize=12,
                ),
                sort=["1-10M", "10-50M", "50-200M", "200M-1B", "1B+"],
            ),
            y=alt.Y(
                "count:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(zero=True),
            ),
        )
        .properties(width=500, height=75)
    )

    # text annotations on top of bars
    text_labels = (
        alt.Chart(sales_counts)
        .mark_text(align="center", baseline="bottom", fontSize=10, color="black")
        .encode(
            x=alt.X(
                "sales_category:O",
                axis=alt.Axis(
                    title="",
                    labelFontSize=12,
                ),
                sort=["1-10M", "10-50M", "50-200M", "200M-1B", "1B+"],
            ),
            y=alt.Y(
                "count:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(zero=True),
            ),
            text="dollar_label:O",
        )
        .properties(width=500, height=75)
    )

    # create numeric categories for jittering
    def category_to_numeric(category):
        mapping = {"1-10M": 1, "10-50M": 2, "50-200M": 3, "200M-1B": 4, "1B+": 5}
        return mapping.get(category, 1)

    rues_data["category_numeric"] = rues_data["sales_category"].apply(category_to_numeric)

    # scatter plot using category numbers with jitter
    scatter = (
        alt.Chart(rues_data)
        .mark_circle(size=6, opacity=0.2, color="#1F5DAD")
        .encode(
            x=alt.X(
                "jittered_category:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(domain=[0.5, 5.5]),
            ),
            y=alt.Y(
                "jitter_y:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(domain=[-0.5, 0.5]),
            ),
        )
        .transform_calculate(
            jitter_y="(random() - 0.5) * 0.4", jittered_category="datum.category_numeric + (random() - 0.5) * 0.8"
        )
        .properties(width=500, height=20)
    )

    # percentage labels at bottom of bars
    percentage_labels = (
        alt.Chart(sales_counts)
        .mark_text(align="center", baseline="bottom", fontSize=9, color="black")
        .encode(
            x=alt.X(
                "sales_category:O",
                axis=alt.Axis(
                    title="",
                    labelFontSize=12,
                ),
                sort=["1-10M", "10-50M", "50-200M", "200M-1B", "1B+"],
            ),
            y=alt.Y(
                "zero:Q",
                axis=alt.Axis(title=""),
                scale=alt.Scale(zero=True),
            ),
            text="percentage_label:O",
        )
        .transform_calculate(zero="-300")
        .properties(width=500, height=75)
    )

    # combine bars with text labels, percentage labels, and scatter
    return (bars + text_labels + percentage_labels) & scatter


def plot_sales_raincloud_combined(df_plot: pd.DataFrame) -> alt.VConcatChart:
    """Create combined raincloud plot for all sales data sources.

    Args:
        df_plot: the dataframe generated by the 'sales' function.

    Returns:
        alt.VConcatChart: Combined raincloud plot with all three sources.

    """
    # get individual plots
    zasca_chart = plot_sales_raincloud_zasca(df_plot)
    emicron_chart = plot_sales_raincloud_emicron(df_plot)
    rues_chart = plot_sales_raincloud_rues(df_plot)

    # combine vertically
    combined = alt.vconcat(zasca_chart, emicron_chart, rues_chart, spacing=20)

    return combined.configure_view(strokeWidth=0).configure_axis(domain=False, ticks=False, labels=False, grid=False)


if __name__ == "__main__":
    processed_dir = Path(DATA_DIR) / "02_processed" / "descriptive" / "manufactura"
    df_plot = pd.read_csv(processed_dir / "sales.csv", encoding="utf-8-sig")

    # create and save raincloud plots
    zasca_chart = plot_sales_raincloud_zasca(df_plot)
    emicron_chart = plot_sales_raincloud_emicron(df_plot)
    rues_chart = plot_sales_raincloud_rues(df_plot)
    combined_chart = plot_sales_raincloud_combined(df_plot)

    # save as png
    output_dir = Path(DATA_DIR) / "03_outputs" / "descriptive" / "manufactura"
    output_dir.mkdir(parents=True, exist_ok=True)

    zasca_chart.save(str(output_dir / "sales_raincloud_zasca.png"), scale_factor=2.0, ppi=300)
    emicron_chart.save(str(output_dir / "sales_raincloud_emicron.png"), scale_factor=2.0, ppi=300)
    rues_chart.save(str(output_dir / "sales_raincloud_rues.png"), scale_factor=2.0, ppi=300)
    combined_chart.save(str(output_dir / "sales_raincloud_combined.png"), scale_factor=2.0, ppi=300)

    logger.info("saved sales raincloud plots")
