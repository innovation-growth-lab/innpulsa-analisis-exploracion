"""Create mirror histogram plots for age distribution analysis."""

import logging
from pathlib import Path

import altair as alt
import pandas as pd

from innpulsa.settings import DATA_DIR

logger = logging.getLogger("innpulsa.scripts.descriptive.plots.mirror_histogram")


def plot_mirror_histogram_with_excess(df_plot: pd.DataFrame) -> alt.LayerChart:
    """Create a mirror histogram in altair that shows common and excess distributions.

    Args:
        df_plot: the dataframe generated by the 'diferencias_de_edad' function.

    Returns:
        an altair chart object.

    """
    # define a colour scheme with dark (common) and light (excess) shades.
    color_scale = alt.Scale(
        domain=["ZASCA_common", "ZASCA_ZASCA", "EMICRON_common", "EMICRON_EMICRON"],
        range=["#1f77b4", "#aec7e8", "#ff7f0e", "#ffbb78"],
        #      [dark blue, light blue, dark orange, light orange]
    )

    # create base chart
    chart = (
        alt.Chart(df_plot)
        .mark_bar()
        .encode(
            y=alt.Y(
                "age_bin:N",
                axis=alt.Axis(labels=True, title="Grupos de Edad", grid=False),
                sort=alt.SortField("age_bin", order="descending"),
            ),
            x=alt.X(
                "plot_value:Q",
                axis=alt.Axis(labels=False, title=None, grid=False),
            ),
            color=alt.Color("color_category:N", scale=color_scale, legend=None),
            order=alt.Order("type:N", sort="descending"),
        )
        .properties(
            width=800,
            height=650,
        )
    )

    # calculate total values for each source
    df_totals = df_plot.groupby(["age_bin", "source"])["plot_value"].sum().reset_index()
    df_totals["total_value"] = df_totals["plot_value"]
    df_totals["abs_value"] = df_totals["total_value"].abs()
    df_totals["x_offset"] = df_totals["total_value"] + 3 * df_totals["total_value"].apply(lambda x: -1 if x < 0 else 1)
    df_totals["text_label"] = df_totals["abs_value"].astype(int).astype(str) + "%"

    # add text labels showing total percentages
    text_chart = (
        alt.Chart(df_totals)
        .mark_text(align="center", baseline="middle", fontSize=16, color="black")
        .encode(
            y=alt.Y("age_bin:N", sort=alt.SortField("age_bin", order="descending")),
            x=alt.X("x_offset:Q"),
            text=alt.Text("text_label:N"),
        )
    )
    # combine chart and text
    chart += text_chart

    return (
        chart.configure_view(strokeWidth=0)
        .configure_axis(domain=False, ticks=False, labels=False, grid=False)
        .configure_axisY(labels=True, title="Grupos de Edad", labelPadding=20, labelFontSize=14)
    )


if __name__ == "__main__":
    # load processed data
    processed_dir = Path(DATA_DIR) / "02_processed" / "descriptive"
    df_plot = pd.read_csv(processed_dir / "age_distribution_manufactura.csv", encoding="utf-8-sig")

    # create and save plot
    chart = plot_mirror_histogram_with_excess(df_plot)

    # save as png
    output_dir = Path(DATA_DIR) / "03_outputs" / "descriptive"
    output_dir.mkdir(parents=True, exist_ok=True)
    chart.save(str(output_dir / "age_distribution_mirror_histogram.png"), scale_factor=2.0, ppi=300)

    logger.info("saved mirror histogram to %s", output_dir / "age_distribution_mirror_histogram.png")
