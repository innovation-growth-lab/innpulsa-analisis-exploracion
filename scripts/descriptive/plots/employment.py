"""Create employment dumbbell plots for ZASCA, EMICRON, and RUES data."""

import altair as alt
import pandas as pd


def plot_employment_dumbbell_by_category(df_plot: pd.DataFrame) -> alt.VConcatChart:
    """Create separate dumbbell plots for each employment category.

    Args:
        df_plot: the dataframe generated by the 'employment' function.

    Returns:
        alt.VConcatChart: Separate dumbbell plots for each category.

    """
    # define colors for each source
    color_scale = alt.Scale(
        domain=["ZASCA", "EMICRON", "RUES"],
        range=["#00B2A2", "#FF5836", "#1F5DAD"],  # green, orange, blue
    )

    charts = []

    # get unique categories
    categories = df_plot["category"].unique()

    for i, category in enumerate(categories):
        category_data = df_plot.loc[df_plot["category"] == category]
        is_last = i == len(categories) - 1

        # x-axis configuration: show labels only on last chart, keep 10% grid on all
        x_config = alt.X(
            "proportion:Q",
            title="Proporci√≥n (%)" if is_last else "",
            scale=alt.Scale(domain=[0, 1]),
            axis=(
                alt.Axis(format=".0%", tickCount=11, grid=True, labelFontSize=8, titleFontSize=10)
                if is_last
                else alt.Axis(format=".0%", tickCount=11, grid=True, labels=False, ticks=False, title="")
            ),
        )

        chart = (
            alt.Chart(category_data)
            .mark_circle(size=600, stroke="black", strokeWidth=1)
            .encode(
                x=x_config,
                y=alt.Y(
                    "subcategory:N",
                    title="",
                    sort=alt.SortField("subcategory"),
                    axis=alt.Axis(labelFontSize=8, titleFontSize=10),
                ),
                color=alt.Color(
                    "source:N",
                    scale=color_scale,
                    legend=alt.Legend(
                        orient="bottom",
                        direction="horizontal",
                        columns=3,
                        title=None,
                        labelExpr="''",
                        symbolSize=200,
                        symbolStrokeWidth=1,
                        padding=0,
                        offset=15,
                        columnPadding=60,
                    ),
                ),
            )
        )

        # add connecting lines between sources for each subcategory
        lines = (
            alt.Chart(category_data)
            .mark_rule(stroke="gray", opacity=0.3, strokeWidth=1, strokeDash=[5, 5])
            .encode(
                x=alt.X("proportion:Q"),
                y=alt.Y("subcategory:N", axis=None, title=None),
                detail="subcategory:N",
            )
            .transform_aggregate(min_x="min(proportion)", max_x="max(proportion)", groupby=["subcategory"])
            .encode(
                x=alt.X("min_x:Q"),
                x2=alt.X2("max_x:Q"),
                y=alt.Y("subcategory:N", axis=None, title=None),
            )
        )

        # value labels inside each circle for all points
        value_labels = (
            alt.Chart(category_data)
            .transform_filter("datum.source != 'RUES'")
            .mark_text(baseline="middle", align="center", dy=0.5, fontSize=8, color="white", fontWeight="bold")
            .encode(
                x=alt.X("proportion:Q"),
                y=alt.Y("subcategory:N", axis=None, title=None),
                text=alt.Text("proportion:Q", format=".0%"),
            )
        )

        # layer the charts and apply properties
        layered_chart = alt.layer(lines, chart, value_labels)
        charts.append(
            layered_chart.properties(
                width=300,
                height=50,
                title=alt.TitleParams(text=f"{category.replace('_', ' ')}", fontSize=10),
            ).resolve_scale(x="shared", y="independent")
        )

    return alt.vconcat(*charts, spacing=8)
