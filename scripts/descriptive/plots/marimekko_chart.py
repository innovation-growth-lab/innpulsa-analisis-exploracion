"""Create Marimekko charts for gender distribution analysis."""

import logging
from pathlib import Path

import altair as alt
import pandas as pd

from innpulsa.settings import DATA_DIR

logger = logging.getLogger("innpulsa.scripts.descriptive.plots.marimekko_chart")

SOURCE_ORDER = {"ZASCA": 1, "EMICRON": 2}
GENDER_ORDER = {"Masculino": 1, "Femenino": 2}


def plot_marimekko_gender_comparison(df_plot: pd.DataFrame) -> alt.LayerChart:
    """Create a Marimekko chart comparing gender distribution between ZASCA and EMICRON.

    Args:
        df_plot: the dataframe generated by the 'diferencias_de_genero' function.

    Returns:
        an altair chart object.

    """
    # create color category for stacked bars
    df_plot = df_plot.copy()
    df_plot = df_plot.loc[~df_plot["gender"].isin(["No binario", "Otro"])]
    df_plot["color_category"] = df_plot["source"] + "_" + df_plot["gender"]

    # sort to ensure ZASCA comes first (left), then EMICRON (right)
    df_plot = df_plot.sort_values(["source", "gender"])

    # create numeric source column for explicit ordering
    df_plot["source_numeric"] = df_plot["source"].map(SOURCE_ORDER.get).astype(int)

    # create order for proper stacking (male at bottom, female on top)
    df_plot["stack_order"] = df_plot["gender"].map(GENDER_ORDER.get).astype(int)

    # calculate text positioning for stacked bars (male at bottom, female at top)
    male_pct = df_plot[df_plot["gender"] == "Masculino"].set_index("source")["percentage"]
    df_plot["male_percentage"] = df_plot["source"].map(male_pct.get).astype(float)

    # calculate text position
    df_plot["text_y_position"] = df_plot.apply(
        lambda row: (row["percentage"] / 2) - 5
        if row["gender"] == "Masculino"
        else (row["male_percentage"] + (row["percentage"] / 2)) - 5,
        axis=1,
    )

    # create text with % symbol (rounded to whole numbers)
    df_plot["text_with_percent"] = df_plot["percentage"].round(0).astype(int).astype(str) + "%"

    # define a colour scheme for stacked bars using team colors
    color_scale = alt.Scale(
        domain=["ZASCA_Masculino", "ZASCA_Femenino", "EMICRON_Masculino", "EMICRON_Femenino"],
        range=["#66D1C7", "#00B2A2", "#FFAC9B", "#FF5836"],
        # green 60, green, red 60, red
    )

    # create stacked bar chart
    base_chart = (
        alt.Chart(df_plot)
        .mark_bar()
        .encode(
            x=alt.X(
                "source_numeric:O",
                axis=alt.Axis(labels=False, title=None, grid=False),
                scale=alt.Scale(padding=0.1),
            ),
            y=alt.Y(
                "percentage:Q",
                axis=alt.Axis(labels=False, title=None, grid=False),
                scale=alt.Scale(domain=[0, 100]),
            ),
            color=alt.Color(
                "color_category:N",
                scale=color_scale,
                legend=None,
            ),
            order=alt.Order("stack_order:Q"),
            tooltip=[
                alt.Tooltip("source:N", title="Fuente"),
                alt.Tooltip("gender:N", title="GÃ©nero"),
                alt.Tooltip("percentage:Q", title="Porcentaje (%)", format=".1f"),
            ],
        )
        .properties(
            width=375,
            height=400,
        )
    )

    # add percentage labels
    text_chart = (
        alt.Chart(df_plot)
        .mark_text(
            align="center",
            baseline="middle",
            fontSize=14,
            color="black",
            dx=0,
            dy=0,
        )
        .encode(
            x=alt.X("source_numeric:O"),
            y=alt.Y("text_y_position:Q"),
            text=alt.Text("text_with_percent:N"),
        )
    )

    # layer charts for stacked bars
    combined_chart = base_chart + text_chart

    return (
        combined_chart.configure_view(strokeWidth=0)
        .configure_axis(domain=False, ticks=False, labels=False, grid=False)
        .configure_legend(labelFontSize=12, titleFontSize=14)
    )


if __name__ == "__main__":
    # load processed data
    processed_dir = Path(DATA_DIR) / "02_processed" / "descriptive" / "manufactura"
    df_plot = pd.read_csv(processed_dir / "gender_distribution.csv", encoding="utf-8-sig")

    # create and save plot
    chart = plot_marimekko_gender_comparison(df_plot)

    # save as png
    output_dir = Path(DATA_DIR) / "03_outputs" / "descriptive" / "manufactura"
    output_dir.mkdir(parents=True, exist_ok=True)
    chart.save(str(output_dir / "gender_distribution_marimekko.png"), scale_factor=2.0, ppi=300)

    logger.info("saved Marimekko chart to %s", output_dir / "gender_distribution_marimekko.png")
